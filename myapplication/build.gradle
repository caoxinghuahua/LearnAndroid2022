plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

//引用自定义插件
apply from: "../test_plugin.gradle"

//apply plugin:PluginCustom

//通过全类名引用继承类实现的插件
//apply plugin: test.hua.MyPluginGroovy
//通过指定id 引用
apply plugin: 'test.hua'

println("子project引用根project中ext:${this.rootProject.ext.name}")
android {
    compileSdkVersion 29
    buildToolsVersion "29.0.3"


    defaultConfig {
        applicationId "com.example.myapplication"
        minSdkVersion 23
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

    }

    signingConfigs {
        joke {
            storePassword '123456'
            keyAlias = 'jetpack'
            keyPassword '123456'
            storeFile file('../key.keystore')
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.joke

        }

        debug {
            signingConfig signingConfigs.joke
        }

    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equalsIgnoreCase("assembleRelease")) {
        // 如果是assembleRelease任务，在最后执行导出apk以及mapping目录到指定目录
        task.doLast {
            outputReleaseFile()
        }
    }
}

void outputReleaseFile() {
    android.applicationVariants.all { variant ->
        // 如果是正式版打包
        if (variant.name.equalsIgnoreCase("release")) {
            File outputPath = new File("$rootDir" + File.separator + "release_app" + File.separator
                    + android.defaultConfig.versionName)
            println(String.format('拷贝生成文件到指定目录[%s]', outputPath.getAbsolutePath()))
            // 拷贝apk文件
            copy {
                from variant.outputs[0].outputFile
                into outputPath
                // 重命名导出名称
                rename {
                    'groovy-' + variant.name + '_' + android.defaultConfig.versionName + ".apk"
                }
            }

            // 拷贝mapping目录
            copy {
                from variant.mappingFile.getParentFile()
                into new File(outputPath, 'mapping')
            }
        }
    }
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

}