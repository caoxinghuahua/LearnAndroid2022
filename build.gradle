
// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    //在project中引入，其他模块都可以使用，使用时加上rootProject.
    apply from: 'arouter_learn/config.gradle'

    ext.kotlin_version = '1.4.32'
    repositories {

        maven { url 'https://maven.aliyun.com/repository/google' }
        maven { url 'https://maven.aliyun.com/repository/jcenter' }
        maven { url 'https://maven.aliyun.com/repository/mavenCentral' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/releases/'}
        maven { url 'https://jitpack.io' }
        maven { url 'https://esri.jfrog.io/artifactory/arcgis' }
        google()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "com.android.tools.build:gradle:7.1.3"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        //AndResGuard
        classpath'com.tencent.mm:AndResGuard-gradle-plugin:1.2.20'
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
//扩展属性
ext {
    name = "test"
}

println("***${ext.name}***")
allprojects {
    repositories {
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/google/'}
        maven { url 'https://maven.aliyun.com/repository/jcenter/'}
        mavenLocal()
        mavenCentral()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

this.beforeEvaluate {
    println("配置阶段开始前")
}
this.afterEvaluate {
    println("配置阶段执行结束")
}
this.gradle.buildFinished {
    println("执行阶段执行完毕")
}

this.getProjects()


def getProjects() {
    println("------")
    println("root project")
    println("------")
    this.getAllprojects().eachWithIndex { Project entry, int i ->
        if (i == 0) {
            println("root project is ${entry.name}")
        } else {
            println("+-----project ${entry.name}")
        }
    }

}

//修改指定project的配置项
//project(":app") {
//    Project project ->
//        version = "1111111"
//}


//两种创建task的方式

task task1 {
    println("**创建task 方式一**")
    doFirst {
        println("**task1 执行阶段开始**")
    }
    doLast {
        println("**task1 执行阶段结束**")
    }
}

this.tasks.create("task2222"){
    setGroup("myTask")//指定分组
    setDescription("自建task")
    println("***创建task的第二种方式***")
    dependsOn(task1)//依赖的task
}

def Task hello=task(hello)
hello.description ='hello world'
hello.group=BasePlugin.BUILD_GROUP
hello.doLast{
    println "任务分组: ${group}"
    println "任务描述: ${description}"
}


//task 静态依赖

task taskA {
    println("start taskA")
    doLast {
        println("taskA")
    }
}


task taskB {
    doLast {
        println("taskB")
    }
}

task taskC(dependsOn: [taskA, taskB]) {
    doLast {
        println("taskC")
    }
}
////方式二
//taskC.dependsOn(taskA,taskB){
//
//}


//配置阶段执行完之后执行
//this.project.afterEvaluate {
//    def buildTask = this.project.getTasks().findByName("build")
//    if (buildTask == null) {
////        throw GradleException
//        println(" build task  is null")
//    }
//
//    buildTask.doLast {
//        println("after build task  excute")
//    }
//
//}


task method{
    //方法的调用
    add(1,2)
    println mins(5,2)
    //类的调用
    def person=new Person(20,'hua')
    person.increaseAge 10
    println person.name +" age is "+person.age

    test()
}

//task中方法的调用
def add(int a,int b){
    //未指定返回值，默认返回最后一行代码执行结果
    println a+b
}
//如果指定了方法返回类型，可以不需要def关键字来定义方法。
int  mins(int a,int b){
    println a-b
    return 1
}
def test() {
    def number=[1,2,3]
    assert number instanceof List
    def name=[one:"张无忌",two:"郭靖",three:"杨过"]
    assert name['one']=="张无忌"
    //exception
   // assert name.one=="杨过"

//    def key = 'name'
//    def person = [key: '魏无羡'] //key是key 而不是name
//    assert person.containsKey('key')
//    person = [(key): '魏无羡'] //key是name
//    assert person.containsKey('name')
//    { it -> println it }   //it是一个显示参数
//    { String a, String b ->
//        println "${a} is a ${b}"
//    }

   //文件的读取
//    def filePath = "/Users/hua/test.txt"
//    def file = new File(filePath) ;
//    //方式一
//    file.eachLine {
//        println it
//    }
//    //方式二
//    println file.text
//    //文件写入
//    file.withPrintWriter {
//        it.println("樱木花道")
//        it.println("流川枫")
//    }
}
//自定义gradle wrapper
//task wraper(type: Wrapper){
//    gradleVersion=""
//    distributionPath=""
//}
//groovy类

class Person{
    Integer age
    String name
    Person(Integer age,String name){
        this.age=age
        this.name=name
    }
    def increaseAge(Integer years){
        this.age+=years
    }
}

